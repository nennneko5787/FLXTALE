# This is a basic workflow to help you get started with Actions

name: FlxTale-Build

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  buildWindows:
    runs-on: windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.3.0

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.2.5
      # Runs a set of commands using the runners shell

      - name: Restore Previous Cache
        id: cache-debug-build-windows-restore
        uses: actions/cache/restore@main
        with:
          path: |
            .haxelib/
            /export/release/windows/haxe/
            /export/release/windows/obj/
          key: cache-windows-build

      - name: Install Haxelib
        run: |
          haxelib setup C:/haxelib
          haxelib install hmm
          haxelib run hmm install
          haxelib run lime setup flixel
          haxelib run lime setup
          haxelib run flixel-tools setup
          haxelib set lime 8.0.1
          haxelib set openfl 9.2.1
          haxelib set flixel 5.2.2
          haxelib set flixel-tools 1.5.1
          haxelib set flixel-addons 3.0.2
          haxelib set flixel-ui 2.5.0
          haxelib list
        shell: cmd
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Building
        run: |
          haxelib run lime build windows -debug --app-version="4.0.0-${{ github.run_id}}"

      - name: Clear Previous Cache
        uses: actions/github-script@main
        with:
          script: |
            try {
            	const caches = await github.rest.actions.getActionsCacheList({
            		owner: context.repo.owner,
            		repo: context.repo.repo,
            	})
            	if (typeof caches.data.actions_caches != null && caches.data.actions_caches.length > 0) {
            		for (const cache of caches.data.actions_caches) {
            			if (cache.key == "cache-windows-build") {
            				console.log('Clearing ' + cache.key + '...')
            				await github.rest.actions.deleteActionsCacheById({
            					owner: context.repo.owner,
            					repo: context.repo.repo,
            					cache_id: cache.id,
            				})
            				console.log("Previous Cache Cleared!")
            			}
            		}
            	}
            } catch (error) {
            	console.log(error.message);
            }

      - name: Save Current Cache
        id: cache-release-build-windows-save
        uses: actions/cache/save@main
        with:
          path: |
            .haxelib/
            /export/release/windows/haxe/
            /export/release/windows/obj/
          key: cache-windows-build

      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: FlxTale-Windows
          path: /export/release/windows/bin
          if-no-files-found: warn
